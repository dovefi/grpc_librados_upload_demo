// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file_service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c78f9f6046a483e, []int{0}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type UploadFileRequest struct {
	// Types that are valid to be assigned to Data:
	//	*UploadFileRequest_Info
	//	*UploadFileRequest_ChunkData
	Data                 isUploadFileRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UploadFileRequest) Reset()         { *m = UploadFileRequest{} }
func (m *UploadFileRequest) String() string { return proto.CompactTextString(m) }
func (*UploadFileRequest) ProtoMessage()    {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c78f9f6046a483e, []int{1}
}

func (m *UploadFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileRequest.Unmarshal(m, b)
}
func (m *UploadFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileRequest.Marshal(b, m, deterministic)
}
func (m *UploadFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequest.Merge(m, src)
}
func (m *UploadFileRequest) XXX_Size() int {
	return xxx_messageInfo_UploadFileRequest.Size(m)
}
func (m *UploadFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequest proto.InternalMessageInfo

type isUploadFileRequest_Data interface {
	isUploadFileRequest_Data()
}

type UploadFileRequest_Info struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadFileRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadFileRequest_Info) isUploadFileRequest_Data() {}

func (*UploadFileRequest_ChunkData) isUploadFileRequest_Data() {}

func (m *UploadFileRequest) GetData() isUploadFileRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadFileRequest) GetInfo() *FileInfo {
	if x, ok := m.GetData().(*UploadFileRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (m *UploadFileRequest) GetChunkData() []byte {
	if x, ok := m.GetData().(*UploadFileRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadFileRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadFileRequest_Info)(nil),
		(*UploadFileRequest_ChunkData)(nil),
	}
}

type UploadFileResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileResponse) Reset()         { *m = UploadFileResponse{} }
func (m *UploadFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadFileResponse) ProtoMessage()    {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c78f9f6046a483e, []int{2}
}

func (m *UploadFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileResponse.Unmarshal(m, b)
}
func (m *UploadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileResponse.Marshal(b, m, deterministic)
}
func (m *UploadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResponse.Merge(m, src)
}
func (m *UploadFileResponse) XXX_Size() int {
	return xxx_messageInfo_UploadFileResponse.Size(m)
}
func (m *UploadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResponse proto.InternalMessageInfo

func (m *UploadFileResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UploadFileResponse) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*FileInfo)(nil), "pb.FileInfo")
	proto.RegisterType((*UploadFileRequest)(nil), "pb.UploadFileRequest")
	proto.RegisterType((*UploadFileResponse)(nil), "pb.UploadFileResponse")
}

func init() {
	proto.RegisterFile("file_service.proto", fileDescriptor_5c78f9f6046a483e)
}

var fileDescriptor_5c78f9f6046a483e = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x77, 0xc3, 0x52, 0xec, 0xd8, 0x0a, 0x0e, 0x28, 0xc5, 0x8b, 0x25, 0xa7, 0x3d, 0xed,
	0x61, 0xbd, 0x78, 0x13, 0x8a, 0x48, 0x05, 0x0f, 0x12, 0xf1, 0xe2, 0xa5, 0x66, 0x9b, 0x59, 0x0c,
	0xae, 0xc9, 0xd8, 0xa4, 0x1e, 0xfc, 0xf5, 0x92, 0x54, 0x51, 0xd4, 0xdb, 0xf0, 0x1e, 0xef, 0xbd,
	0x2f, 0x01, 0xec, 0xed, 0x40, 0xab, 0x40, 0x9b, 0x37, 0xbb, 0xa6, 0x86, 0x37, 0x3e, 0x7a, 0x14,
	0xdc, 0xc9, 0x16, 0xf6, 0xae, 0xec, 0x40, 0xd7, 0xae, 0xf7, 0x88, 0x50, 0x39, 0xfd, 0x42, 0xb3,
	0x72, 0x5e, 0xd6, 0x63, 0x95, 0xef, 0xa4, 0x05, 0xfb, 0x4e, 0x33, 0x31, 0x2f, 0xeb, 0xa9, 0xca,
	0xb7, 0x7c, 0x84, 0xc3, 0x7b, 0x1e, 0xbc, 0x36, 0x29, 0xa9, 0xe8, 0x75, 0x4b, 0x21, 0xa2, 0x84,
	0xca, 0xba, 0xde, 0xe7, 0xf0, 0x7e, 0x3b, 0x69, 0xb8, 0x6b, 0xbe, 0x8a, 0x97, 0x85, 0xca, 0x1e,
	0x9e, 0x02, 0xac, 0x9f, 0xb6, 0xee, 0x79, 0x65, 0x74, 0xd4, 0xb9, 0x72, 0xb2, 0x2c, 0xd4, 0x38,
	0x6b, 0x97, 0x3a, 0xea, 0xc5, 0x08, 0xaa, 0x64, 0xc9, 0x73, 0xc0, 0x9f, 0x0b, 0x81, 0xbd, 0x0b,
	0x84, 0x07, 0x20, 0xac, 0xf9, 0xa4, 0x13, 0xd6, 0xfc, 0xc7, 0xd6, 0xde, 0xc2, 0xf4, 0x46, 0x73,
	0xf4, 0x7c, 0xb7, 0x7b, 0x2a, 0x5e, 0x00, 0x7c, 0x57, 0xe1, 0x51, 0xe2, 0xfa, 0x03, 0x7f, 0x72,
	0xfc, 0x5b, 0xde, 0x2d, 0xca, 0xa2, 0x2e, 0x17, 0xd5, 0x83, 0xe0, 0xae, 0x1b, 0xe5, 0x2f, 0x3b,
	0xfb, 0x08, 0x00, 0x00, 0xff, 0xff, 0x30, 0xb0, 0x75, 0xb6, 0x48, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LaptopServiceClient is the client API for LaptopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LaptopServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (LaptopService_UploadFileClient, error)
}

type laptopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaptopServiceClient(cc grpc.ClientConnInterface) LaptopServiceClient {
	return &laptopServiceClient{cc}
}

func (c *laptopServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (LaptopService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LaptopService_serviceDesc.Streams[0], "/pb.LaptopService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &laptopServiceUploadFileClient{stream}
	return x, nil
}

type LaptopService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type laptopServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *laptopServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *laptopServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LaptopServiceServer is the server API for LaptopService service.
type LaptopServiceServer interface {
	UploadFile(LaptopService_UploadFileServer) error
}

// UnimplementedLaptopServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLaptopServiceServer struct {
}

func (*UnimplementedLaptopServiceServer) UploadFile(srv LaptopService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterLaptopServiceServer(s *grpc.Server, srv LaptopServiceServer) {
	s.RegisterService(&_LaptopService_serviceDesc, srv)
}

func _LaptopService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LaptopServiceServer).UploadFile(&laptopServiceUploadFileServer{stream})
}

type LaptopService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type laptopServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *laptopServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *laptopServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LaptopService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LaptopService",
	HandlerType: (*LaptopServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _LaptopService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file_service.proto",
}
