// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fservice_2eproto;
namespace pb {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class UploadFileRequest;
class UploadFileRequestDefaultTypeInternal;
extern UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
class UploadFileResponse;
class UploadFileResponseDefaultTypeInternal;
extern UploadFileResponseDefaultTypeInternal _UploadFileResponse_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::FileInfo* Arena::CreateMaybeMessage<::pb::FileInfo>(Arena*);
template<> ::pb::UploadFileRequest* Arena::CreateMaybeMessage<::pb::UploadFileRequest>(Arena*);
template<> ::pb::UploadFileResponse* Arena::CreateMaybeMessage<::pb::UploadFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fservice_2eproto);
    return ::descriptor_table_file_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UploadFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.UploadFileRequest) */ {
 public:
  inline UploadFileRequest() : UploadFileRequest(nullptr) {}
  virtual ~UploadFileRequest();

  UploadFileRequest(const UploadFileRequest& from);
  UploadFileRequest(UploadFileRequest&& from) noexcept
    : UploadFileRequest() {
    *this = ::std::move(from);
  }

  inline UploadFileRequest& operator=(const UploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileRequest& operator=(UploadFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileRequest& default_instance();

  enum DataCase {
    kInfo = 1,
    kChunkData = 2,
    DATA_NOT_SET = 0,
  };

  static inline const UploadFileRequest* internal_default_instance() {
    return reinterpret_cast<const UploadFileRequest*>(
               &_UploadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadFileRequest& a, UploadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileRequest* New() const final {
    return CreateMaybeMessage<UploadFileRequest>(nullptr);
  }

  UploadFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileRequest& from);
  void MergeFrom(const UploadFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.UploadFileRequest";
  }
  protected:
  explicit UploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fservice_2eproto);
    return ::descriptor_table_file_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kChunkDataFieldNumber = 2,
  };
  // .pb.FileInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::pb::FileInfo& info() const;
  ::pb::FileInfo* release_info();
  ::pb::FileInfo* mutable_info();
  void set_allocated_info(::pb::FileInfo* info);
  private:
  const ::pb::FileInfo& _internal_info() const;
  ::pb::FileInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::pb::FileInfo* info);
  ::pb::FileInfo* unsafe_arena_release_info();

  // bytes chunk_data = 2;
  private:
  bool _internal_has_chunk_data() const;
  public:
  void clear_chunk_data();
  const std::string& chunk_data() const;
  void set_chunk_data(const std::string& value);
  void set_chunk_data(std::string&& value);
  void set_chunk_data(const char* value);
  void set_chunk_data(const void* value, size_t size);
  std::string* mutable_chunk_data();
  std::string* release_chunk_data();
  void set_allocated_chunk_data(std::string* chunk_data);
  private:
  const std::string& _internal_chunk_data() const;
  void _internal_set_chunk_data(const std::string& value);
  std::string* _internal_mutable_chunk_data();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:pb.UploadFileRequest)
 private:
  class _Internal;
  void set_has_info();
  void set_has_chunk_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::pb::FileInfo* info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_data_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_file_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UploadFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.UploadFileResponse) */ {
 public:
  inline UploadFileResponse() : UploadFileResponse(nullptr) {}
  virtual ~UploadFileResponse();

  UploadFileResponse(const UploadFileResponse& from);
  UploadFileResponse(UploadFileResponse&& from) noexcept
    : UploadFileResponse() {
    *this = ::std::move(from);
  }

  inline UploadFileResponse& operator=(const UploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileResponse& operator=(UploadFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadFileResponse& default_instance();

  static inline const UploadFileResponse* internal_default_instance() {
    return reinterpret_cast<const UploadFileResponse*>(
               &_UploadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadFileResponse& a, UploadFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadFileResponse* New() const final {
    return CreateMaybeMessage<UploadFileResponse>(nullptr);
  }

  UploadFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadFileResponse& from);
  void MergeFrom(const UploadFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.UploadFileResponse";
  }
  protected:
  explicit UploadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fservice_2eproto);
    return ::descriptor_table_file_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.UploadFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileInfo

// string name = 1;
inline void FileInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.FileInfo.name)
  return _internal_name();
}
inline void FileInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.FileInfo.name)
}
inline std::string* FileInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.FileInfo.name)
  return _internal_mutable_name();
}
inline const std::string& FileInfo::_internal_name() const {
  return name_.Get();
}
inline void FileInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.FileInfo.name)
}
inline void FileInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.FileInfo.name)
}
inline void FileInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.FileInfo.name)
}
inline std::string* FileInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.FileInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.FileInfo.name)
}

// uint32 size = 2;
inline void FileInfo::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:pb.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void FileInfo::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:pb.FileInfo.size)
}

// -------------------------------------------------------------------

// UploadFileRequest

// .pb.FileInfo info = 1;
inline bool UploadFileRequest::_internal_has_info() const {
  return data_case() == kInfo;
}
inline bool UploadFileRequest::has_info() const {
  return _internal_has_info();
}
inline void UploadFileRequest::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void UploadFileRequest::clear_info() {
  if (_internal_has_info()) {
    if (GetArena() == nullptr) {
      delete data_.info_;
    }
    clear_has_data();
  }
}
inline ::pb::FileInfo* UploadFileRequest::release_info() {
  // @@protoc_insertion_point(field_release:pb.UploadFileRequest.info)
  if (_internal_has_info()) {
    clear_has_data();
      ::pb::FileInfo* temp = data_.info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::FileInfo& UploadFileRequest::_internal_info() const {
  return _internal_has_info()
      ? *data_.info_
      : reinterpret_cast< ::pb::FileInfo&>(::pb::_FileInfo_default_instance_);
}
inline const ::pb::FileInfo& UploadFileRequest::info() const {
  // @@protoc_insertion_point(field_get:pb.UploadFileRequest.info)
  return _internal_info();
}
inline ::pb::FileInfo* UploadFileRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.UploadFileRequest.info)
  if (_internal_has_info()) {
    clear_has_data();
    ::pb::FileInfo* temp = data_.info_;
    data_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadFileRequest::unsafe_arena_set_allocated_info(::pb::FileInfo* info) {
  clear_data();
  if (info) {
    set_has_info();
    data_.info_ = info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.UploadFileRequest.info)
}
inline ::pb::FileInfo* UploadFileRequest::_internal_mutable_info() {
  if (!_internal_has_info()) {
    clear_data();
    set_has_info();
    data_.info_ = CreateMaybeMessage< ::pb::FileInfo >(GetArena());
  }
  return data_.info_;
}
inline ::pb::FileInfo* UploadFileRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:pb.UploadFileRequest.info)
  return _internal_mutable_info();
}

// bytes chunk_data = 2;
inline bool UploadFileRequest::_internal_has_chunk_data() const {
  return data_case() == kChunkData;
}
inline void UploadFileRequest::set_has_chunk_data() {
  _oneof_case_[0] = kChunkData;
}
inline void UploadFileRequest::clear_chunk_data() {
  if (_internal_has_chunk_data()) {
    data_.chunk_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& UploadFileRequest::chunk_data() const {
  // @@protoc_insertion_point(field_get:pb.UploadFileRequest.chunk_data)
  return _internal_chunk_data();
}
inline void UploadFileRequest::set_chunk_data(const std::string& value) {
  _internal_set_chunk_data(value);
  // @@protoc_insertion_point(field_set:pb.UploadFileRequest.chunk_data)
}
inline std::string* UploadFileRequest::mutable_chunk_data() {
  // @@protoc_insertion_point(field_mutable:pb.UploadFileRequest.chunk_data)
  return _internal_mutable_chunk_data();
}
inline const std::string& UploadFileRequest::_internal_chunk_data() const {
  if (_internal_has_chunk_data()) {
    return data_.chunk_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UploadFileRequest::_internal_set_chunk_data(const std::string& value) {
  if (!_internal_has_chunk_data()) {
    clear_data();
    set_has_chunk_data();
    data_.chunk_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.chunk_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadFileRequest::set_chunk_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.UploadFileRequest.chunk_data)
  if (!_internal_has_chunk_data()) {
    clear_data();
    set_has_chunk_data();
    data_.chunk_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.chunk_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.UploadFileRequest.chunk_data)
}
inline void UploadFileRequest::set_chunk_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_chunk_data()) {
    clear_data();
    set_has_chunk_data();
    data_.chunk_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.chunk_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.UploadFileRequest.chunk_data)
}
inline void UploadFileRequest::set_chunk_data(const void* value,
                             size_t size) {
  if (!_internal_has_chunk_data()) {
    clear_data();
    set_has_chunk_data();
    data_.chunk_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.chunk_data_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.UploadFileRequest.chunk_data)
}
inline std::string* UploadFileRequest::_internal_mutable_chunk_data() {
  if (!_internal_has_chunk_data()) {
    clear_data();
    set_has_chunk_data();
    data_.chunk_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.chunk_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadFileRequest::release_chunk_data() {
  // @@protoc_insertion_point(field_release:pb.UploadFileRequest.chunk_data)
  if (_internal_has_chunk_data()) {
    clear_has_data();
    return data_.chunk_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UploadFileRequest::set_allocated_chunk_data(std::string* chunk_data) {
  if (has_data()) {
    clear_data();
  }
  if (chunk_data != nullptr) {
    set_has_chunk_data();
    data_.chunk_data_.UnsafeSetDefault(chunk_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(chunk_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pb.UploadFileRequest.chunk_data)
}

inline bool UploadFileRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UploadFileRequest::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline UploadFileRequest::DataCase UploadFileRequest::data_case() const {
  return UploadFileRequest::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadFileResponse

// string id = 1;
inline void UploadFileResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UploadFileResponse::id() const {
  // @@protoc_insertion_point(field_get:pb.UploadFileResponse.id)
  return _internal_id();
}
inline void UploadFileResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.UploadFileResponse.id)
}
inline std::string* UploadFileResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:pb.UploadFileResponse.id)
  return _internal_mutable_id();
}
inline const std::string& UploadFileResponse::_internal_id() const {
  return id_.Get();
}
inline void UploadFileResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadFileResponse::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.UploadFileResponse.id)
}
inline void UploadFileResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pb.UploadFileResponse.id)
}
inline void UploadFileResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.UploadFileResponse.id)
}
inline std::string* UploadFileResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadFileResponse::release_id() {
  // @@protoc_insertion_point(field_release:pb.UploadFileResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadFileResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.UploadFileResponse.id)
}

// uint32 size = 2;
inline void UploadFileResponse::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UploadFileResponse::size() const {
  // @@protoc_insertion_point(field_get:pb.UploadFileResponse.size)
  return _internal_size();
}
inline void UploadFileResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void UploadFileResponse::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:pb.UploadFileResponse.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fservice_2eproto
